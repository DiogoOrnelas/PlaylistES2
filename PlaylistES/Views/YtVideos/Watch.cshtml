@using PlaylistES.Models
@model IEnumerable<PlaylistES.Models.YouTubeVideo>

@{
    ViewData["Title"] = "Home page";
}
<head>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.10.2/Sortable.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"/>
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">

   
</head>
<body>
    @{
        Playlists playlist = ViewBag.Playlist;
        YouTubeVideo videoPlay = ViewBag.Watch;
        User user = ViewBag.user;
    }
    <div class="SideBar">
        <div class="ProfContainer">  
            <img draggable="false" class="imgP" src=@user.Profilepicture>
            <div class="ProfName">
            <p>@user.username</p>
        </div>
       
    </div>
    <div class="Divider"></div>
    <div class="PLContainer">
        <div class="PLContainer2">
                <img  draggable="false" class="imgPL" src=@playlist.PlaylistImage>
                <div class="PLTitle">
                    <p>@playlist.PlaylistName</p>
                </div>
                <div class="PLDescription">
                    <p>@playlist.PlaylistDescription</p>
                </div>
            </div>
        </div>
            
        </div>


    
    <div class="WatchContainer">
        
            <div class="VideoPlaceholder">
                 <div class="Player" id="player"></div>

                <div class="PlayingVidTitle">@videoPlay.VideoTitle</div>
            </div>
            <div class="MoreVids"> 
                @foreach (var item in Model) {
                    @if (item.Video_id == videoPlay.Video_id){
                        <div class ="NextVidsSEL">
                             <div class="Image-container">
                            <img draggable="false" class="imgPL" src=@Html.DisplayFor(modelItem => item.Thumbnail)>
                        </div>
                            <div class="VideoTitle">@Html.DisplayFor(modelItem => item.VideoTitle)</div>
                        </div>
                    }else{
                        <form class="NextVids"  method="post" asp-action="Watch" asp-controller="YtVideos" asp-route-id="@playlist.PlaylistId" asp-route-watch="@item.Video_id" >
                            <button class="PlayVid"  type="submit" ></button>
                            <input type="hidden" name="id" value="@item.id">
                            <input type="hidden" name="Video_id" value="@item.Video_id">
                            <input type="hidden" name="VideoTitle" value="@item.VideoTitle">
                            <input type="hidden" name="Thumbnail" value="@item.Thumbnail">
                            <input type="hidden" name="PlaylistId" value="@item.PlaylistId"> 
                        
                        <div class="Image-container">
                            <img draggable="false" class="imgPL" src=@Html.DisplayFor(modelItem => item.Thumbnail)>
                        </div>
                            <div class="VideoTitle">@Html.DisplayFor(modelItem => item.VideoTitle)</div>
                        
                      
                       </form>
                     }
                }
            </div> 
                
            
    </div>
   
    <script>
      
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;

      function onYouTubeIframeAPIReady() {
         
            player = new YT.Player('player', {
                videoId: '@videoPlay.Video_id',
                events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
                }
            });
          

      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.ENDED) {
          event.target.playVideo();
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
    </script>
</body>